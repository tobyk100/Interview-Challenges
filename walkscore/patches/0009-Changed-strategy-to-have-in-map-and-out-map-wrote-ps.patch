From 02224e424ce597117a78a9e9c84659f8cd2845f7 Mon Sep 17 00:00:00 2001
From: Tobias Kahan <tobyk100@uw.edu>
Date: Thu, 1 Nov 2012 13:28:26 -0700
Subject: [PATCH 09/17] Changed strategy to have in map and out map, wrote
 pseudo code to get a feel for how it would work

---
 connectNeighbors.py | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/connectNeighbors.py b/connectNeighbors.py
index 34aafbc..8fcc171 100755
--- a/connectNeighbors.py
+++ b/connectNeighbors.py
@@ -6,6 +6,7 @@ SEPARATOR = '\t'  # The character separating nodes in a line of input
 def main(source):
   edges = read_graph(source)
   graph = parse_graph(edges)
+  print(graph)
   remove_duplicates(graph)
   print_results(graph)
 
@@ -19,18 +20,23 @@ def read_graph(source):
 def parse_graph(edges):
   graph = {}
   for [V1, V2] in edges:
-    graph.setdefault(V1, []).append(V2)
+    graph.setdefault(V1, set()).add(V2)
     # If V1 is in graph, dereference the list and append, otherwise insert V1
     # with an empty list as its value and append to that new empty list
 
   return graph
 
 def remove_duplicates(graph):
-  # Psuedo code, I think this will end up being O(vertices*edges)
-  # for each key in graph
-  #   if size of corresponding list == 1
-  #     if key appears once as a value
-  #       remove the key and join neighbors
+  # Pseudo code for edge inmap, outmap solution
+  #   for each V1 in inmap.keys()
+  #     if inmap[V1].size() == 1 && outmap[V1].size() == 1
+  #       inNode = inmap[V1].pop()
+  #       outNode = outmap[V1].pop()
+  #       inmap[outNode].add(inNode)
+  #       outmap[inNode].add(outNode)
+  #       remove V1 from inmap and outmap
+
+  
 
 def print_results(graph):
   print "Hello"
-- 
1.7.11.7

