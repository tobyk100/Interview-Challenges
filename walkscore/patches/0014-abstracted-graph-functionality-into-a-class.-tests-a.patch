From d6e6acb0e76a8412f437ceada3a7a03b101eb29d Mon Sep 17 00:00:00 2001
From: Tobias Kahan <tobyk100@uw.edu>
Date: Thu, 1 Nov 2012 16:44:30 -0700
Subject: [PATCH 14/17] abstracted graph functionality into a class. tests and
 works

---
 connectNeighbors.py | 71 +++++++++++++++++++++++------------------------------
 1 file changed, 31 insertions(+), 40 deletions(-)

diff --git a/connectNeighbors.py b/connectNeighbors.py
index 55894c4..2357283 100755
--- a/connectNeighbors.py
+++ b/connectNeighbors.py
@@ -4,12 +4,33 @@ import string
 SEPARATOR = '\t'  # The character separating nodes in a line of input
 
 class Graph: 
-  def __init__():
-    __init__(self, {}, {})
-
-  def __init__(self, ingraph, outgraph):
-    self.ingraph = ingraph
-    self.outgraph = outgraph
+  def __init__(self, edges):
+    # If V1 is in graph, dereference the list and append, otherwise insert V1
+    # with an empty list as its value and append to that new empty list
+    self.ingraph = {}
+    self.outgraph = {}
+    for [V1, V2] in edges:
+      self.ingraph.setdefault(V1, set()).add(V2)
+      self.outgraph.setdefault(V2, set()).add(V1)
+
+  def remove_duplicates(self):
+    for V1 in self.ingraph.keys():
+      if (V1 in self.ingraph) & (V1 in self.outgraph):
+        self._check_remove_node(V1)
+
+  def _check_remove_node(self, node):
+      if len(self.ingraph[node]) == len(self.outgraph[node]) == 1:
+        inNode = self.ingraph.pop(node).pop()
+        outNode = self.outgraph.pop(node).pop()
+        self.ingraph[outNode].remove(node)
+        self.outgraph[inNode].remove(node)
+        if inNode != outNode:
+          self.ingraph[outNode].add(inNode)
+          self.outgraph[inNode].add(outNode)
+        else:
+          if len(self.ingraph[inNode]) == len(self.outgraph[inNode]) == 0:
+            self.ingraph.pop(inNode)
+            self.outgraph.pop(outNode)
 
   def __str__(self):
     retval = ""
@@ -20,47 +41,17 @@ class Graph:
 
 
 def main(source):
-  edges = read_graph(source)
-  graph = parse_graph(edges)
-  remove_duplicates(graph)
+  edges = read_edges(source)
+  graph = Graph(edges)
+  graph.remove_duplicates()
   sys.stdout.write(graph.__str__())  # Using sys to avoid auto newline of print
 
-def read_graph(source): 
+def read_edges(source): 
   # Iteratre through each line of stdin, stripping trailing whitespace and
   # splitting on separator 
   edges = [line.rstrip(string.whitespace).split(SEPARATOR) for line in source]
 
   return edges
 
-def parse_graph(edges):
-  ingraph = {}
-  outgraph = {}
-  for [V1, V2] in edges:
-    outgraph.setdefault(V1, set()).add(V2)
-    ingraph.setdefault(V2, set()).add(V1)
-    # If V1 is in graph, dereference the list and append, otherwise insert V1
-    # with an empty list as its value and append to that new empty list
-
-  return Graph(ingraph, outgraph)
-
-def remove_duplicates(graph):
-  for V1 in graph.ingraph.keys():
-    if (V1 in graph.ingraph) & (V1 in graph.outgraph):
-      check_remove_node(graph, V1)
-
-def check_remove_node(graph, node):
-    if len(graph.ingraph[node]) == len(graph.outgraph[node]) == 1:
-      inNode = graph.ingraph.pop(node).pop()
-      outNode = graph.outgraph.pop(node).pop()
-      graph.ingraph[outNode].remove(node)
-      graph.outgraph[inNode].remove(node)
-      if inNode != outNode:
-        graph.ingraph[outNode].add(inNode)
-        graph.outgraph[inNode].add(outNode)
-      else:
-        if len(graph.ingraph[inNode]) == len(graph.outgraph[inNode]) == 0:
-          graph.ingraph.pop(inNode)
-          graph.outgraph.pop(outNode)
-
 if __name__ == "__main__":
   main(sys.stdin)
-- 
1.7.11.7

